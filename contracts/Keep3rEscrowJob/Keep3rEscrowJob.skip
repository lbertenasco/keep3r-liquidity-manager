// SPDX-License-Identifier: MIT

pragma solidity 0.6.12;

import "@openzeppelin/contracts/math/SafeMath.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@lbertenasco/contract-utils/contracts/abstract/MachineryReady.sol";
import "@lbertenasco/contract-utils/interfaces/keep3r/IKeep3rV1.sol";

// import "../../interfaces/jobs/IKeep3rEscrowJob.sol";

import "../../interfaces/keep3r/IKeep3rEscrow.sol";

import "./Keep3rEscrowJobEscrowsHandler.sol";
import "./Keep3rEscrowJobUserJobsHandler.sol";
import "./Keep3rEscrowJobWork.sol";

interface IKeep3rEscrowJob {}

contract Keep3rEscrowJob is MachineryReady, Keep3rEscrowJobEscrowsHandler, Keep3rEscrowJobUserJobsHandler, Keep3rEscrowJobWork {
    constructor(
        address _mechanicsRegistry,
        address _keep3r,
        address _liquidity,
        address _escrow1,
        address _escrow2
    ) public MachineryReady(_mechanicsRegistry) Keep3rEscrowJobEscrowsHandler(_escrow1, _escrow2) {}

    // Keep3r actions
    function work(address _job) external override notPaused {
        (IKeep3rEscrow _escrow, Actions _action) = getNextAction(_job);
        require(_action != Actions.None, "Keep3rEscrowJob::work:not-workable");
        _work(address(_escrow), _action, _job);
    }

    // Governor escrow bypass
    function forceWork(address _job) external override onlyGovernorOrMechanic {
        (IKeep3rEscrow _escrow, Actions _action) = getNextAction(_job);
        _work(address(_escrow), _action, _job);
    }

    // Escrows Handler

    function returnLPsToGovernance(address _escrow) external override onlyGovernorOrMechanic {
        _returnLPsToGovernance(_escrow);
    }

    function addLiquidityToJob(address _escrow, address _job) external override onlyGovernorOrMechanic {
        _addLiquidityToJob(_escrow, _job, liquidity.balanceOf(_escrow));
    }

    function applyCreditToJob(address _escrow, address _job) external override onlyGovernorOrMechanic {
        _applyCreditToJob(_escrow, _job);
    }

    function unbondLiquidityFromJob(address _escrow, address _job) external override onlyGovernorOrMechanic {
        _unbondLiquidityFromJob(_escrow, _job, keep3rV1.liquidityProvided(_escrow, address(liquidity), _job));
    }

    function removeLiquidityFromJob(address _escrow, address _job) external override onlyGovernorOrMechanic {
        _removeLiquidityFromJob(_escrow, _job);
    }

    function setPendingGovernorOnEscrow(address _escrow, address _pendingGovernor) external override onlyGovernor {
        _setPendingGovernorOnEscrow(_escrow, _pendingGovernor);
    }

    function acceptGovernorOnEscrow(address _escrow) external override onlyGovernor {
        _acceptGovernorOnEscrow(_escrow);
    }

    function sendDustOnEscrow(
        address _escrow,
        address _to,
        address _token,
        uint256 _amount
    ) external override onlyGovernor {
        _sendDustOnEscrow(_escrow, _to, _token, _amount);
    }

    // Jobs Handler

    function addJob(address _job, uint256 _keep3rs) public override onlyGovernorOrMechanic {
        _addJob(_job, _keep3rs);
    }

    function modifyJob(address _job, uint256 _keep3rs) public override onlyGovernorOrMechanic {
        _modifyJob(_job, _keep3rs);
    }

    function removeJob(address _job) public override onlyGovernorOrMechanic {
        _removeJob(_job);
    }
}
